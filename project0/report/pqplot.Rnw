library(Rmisc)
library(ggplot2)
library(plyr)
library(scales)

plot_ratio_range_accuracy <- function(bayesfile, svmfile, knnfile) {
    # install.packages(c("Rmisc", "ggplot2", "plyr"))

    figfile <- "fig.eps"

    dfb <- read.csv(bayesfile)
    dfs <- read.csv(svmfile)
    dfk <- read.csv(knnfile)

    df <- rbind(dfb, dfs, dfk)

    df$ratio <- df$train_size / (df$train_size + df$eval_size)

    # Line graph.

    p <- ggplot(df, aes(x = ratio, y = accuracy, color = classifier, shape = classifier)) +
                geom_line() +
                ylab("accuracy") +
                xlab("training-evaluation ratio") +
                scale_x_continuous(breaks = pretty_breaks(n = 10)) +
    # Themes
                theme_bw() +
                theme(axis.text = element_text(size = 14),
                      axis.title = element_text(size = 16),
                      legend.text = element_text(size = 16),
                      legend.title = element_text(size = 18),
                      legend.position = c(1, 0.3),
                      legend.justification = c(1, 1),
                      legend.background = element_rect(fill = alpha("black", 0)))

    postscript(file = figfile, paper = "special", width = 10, height = 5, horizontal = FALSE)
    plot(p)
    invisible(dev.off())
    cat("\\includegraphics[width = \\textwidth]{", figfile, "}\n\n", sep = "")
}

plot_ratio_range_size <- function(bayesfile, svmfile, knnfile) {
    # install.packages(c("Rmisc", "ggplot2", "plyr"))

    figfile <- "fig2.eps"

    dfb <- read.csv(bayesfile)
    dfs <- read.csv(svmfile)
    dfk <- read.csv(knnfile)

    df <- rbind(dfb, dfs, dfk)

    df$ratio <- df$train_size / (df$train_size + df$eval_size)

    # Line graph.

    p <- ggplot(df, aes(x = ratio, y = classifier_size, color = classifier, shape = classifier)) +
                geom_line() +
                ylab("classifier size (bytes)") +
                xlab("training-evaluation ratio") +
                scale_x_continuous(breaks = pretty_breaks(n = 10)) +
    # Themes
                theme_bw() +
                theme(axis.text = element_text(size = 14),
                      axis.title = element_text(size = 16),
                      legend.text = element_text(size = 16),
                      legend.title = element_text(size = 18),
                      legend.position = c(1, 0.3),
                      legend.justification = c(1, 1),
                      legend.background = element_rect(fill = alpha("black", 0)))

    postscript(file = figfile, paper = "special", width = 10, height = 5, horizontal = FALSE)
    plot(p)
    invisible(dev.off())
    cat("\\includegraphics[width = \\textwidth]{", figfile, "}\n\n", sep = "")
}

pqplot <- function(csvfile) {
    # install.packages(c("Rmisc", "ggplot2", "plyr"))

    figfile <- "fig.eps"

    df <- read.csv(csvfile)
    colnames(df) <- c("kernel", "p", "throughput")

    df$throughput <- df$throughput/1E6

    df2 <- ddply(df, .(kernel, p), summarize, mean = mean(throughput),
                 lower = CI(throughput)[[3]], upper = CI(throughput)[[1]])

    # Bar graph

    # dodge <- position_dodge(width=0.9)
    # p <- ggplot(df2, aes(x = factor(p), y = mean, fill = factor(kernel))) +
    #             geom_bar(stat = "identity", position = dodge) +
    #             geom_errorbar(aes(ymin = lower, ymax = upper), position = dodge, width = 0.3) +
    #             ylab("throughput [Mops/s]") +
    #             xlab("number of threads")

    p <- ggplot(df2, aes(x = p, y = mean, color = kernel, shape = kernel)) +
                geom_line() +
                geom_point(size = 4) +
    #            geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.3) +
                ylab("throughput in Mops/s") +
                xlab("number of threads") +
    # Themes
                theme_bw() +
                theme(axis.text = element_text(size = 16),
                      axis.title = element_text(size = 18),
                      legend.text = element_text(size = 16),
                      legend.title = element_text(size = 18),
                      legend.position = c(1, 1),
                      legend.justification = c(1, 1),
                      legend.background = element_rect(fill = alpha("black", 0)))

    postscript(file = figfile, paper = "special", width = 10, height = 5, horizontal = FALSE)
    plot(p)
    invisible(dev.off())
    cat("\\includegraphics[width = \\textwidth]{", figfile, "}\n\n", sep = "")

    # PDF output

    # pdf("abcd.pdf", width=10, height=10)
    # plot(p)
    # dev.off()
}
